import DateTimePicker from "@react-native-community/datetimepicker";
import * as ImagePicker from "expo-image-picker";
import { Picker } from "@react-native-picker/picker";
import { useLocalSearchParams, useRouter } from "expo-router";
import { useEffect, useState } from "react";
import {
  ActivityIndicator,
  Button,
  Image,
  Modal,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "https://xttbiyomostvfgsqyduv.supabase.co"; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh0dGJpeW9tb3N0dmZnc3F5ZHV2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU5MjY2MDksImV4cCI6MjA3MTUwMjYwOX0.NBqBjM3cqE14Erri9MysjoFL0AkkDhs65Q_OlcaANEw"; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export default function TaskCard() {
  const router = useRouter();
  const { id } = useLocalSearchParams(); // –±–µ—Ä–µ–º id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

  // —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [name, setName] = useState("");
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [showStartPicker, setShowStartPicker] = useState(false);
  const [showEndPicker, setShowEndPicker] = useState(false);
  const [parentId, setParentId] = useState(null);
  const [authorId, setAuthorId] = useState(null);
  const [projectId, setProjectId] = useState(null);
  const [nextJobId, setNextJobId] = useState(null);
  const [prevJobId, setPrevJobId] = useState(null);
  const [isGroup, setIsGroup] = useState(false);
  const [value, setValue] = useState(0);
  const [sectionId, setSectionId] = useState(null);
  const [photos, setPhotos] = useState([]); // –ú–∞—Å—Å–∏–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
  const [modalVisible, setModalVisible] = useState(false);
  const [loading, setLoading] = useState(false);

  // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
  useEffect(() => {
    if (id) {
      loadTask();
    }
  }, [id]);

  const loadTask = async () => {
    try {
      setLoading(true);

      const { data: task, error } = await supabase
        .from("PlanJobs")
        .select("*")
        .eq("Id", id)
        .single();

      if (error) throw error;

      const { data: files } = await supabase
        .from("PlanJobsFiles")
        .select("File, isPhoto, Author_id, Date")
        .eq("Jobs_id", id);

      setName(task.Name || "");
      setStartDate(new Date(task.StartDate));
      setEndDate(new Date(task.EndDate));
      setParentId(task.Parent_id);
      setAuthorId(task.Author_id);
      setProjectId(task.Project_id);
      setNextJobId(task.Next_job_id);
      setPrevJobId(task.Prev_job_id);
      setIsGroup(!!task.isGroup);
      setValue(task.value || "");
      setSectionId(task.Section_id);
      if (files && files.length > 0) {
        setPhotos(files.map(file => file.File)); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
      }

    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:", err.message);
    } finally {
      setLoading(false);
    }
  };

  // –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
      selectionLimit: 0, // 0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    });
    if (!result.canceled) {
      setPhotos(prevPhotos => [...prevPhotos, ...result.assets.map(asset => asset.uri)]);
    }
  };

  // —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  const removePhoto = (index) => {
    setPhotos(prevPhotos => prevPhotos.filter((_, i) => i !== index));
  };

  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const startTask = async () => {
      try {
      setLoading(true);

      let jobId = id;

      if (id!="new") {
        // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const { error } = await supabase
          .from("PlanJobs")
          .update({
            status: "start",
          })
          .eq("Id", id);

        if (error) throw error;

      } 

      setModalVisible(true);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err.message);
      alert("–û—à–∏–±–∫–∞: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const saveTask = async () => {
    try {
      setLoading(true);

      let jobId = id;

      if (id!="new") {
        // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const { error } = await supabase
          .from("PlanJobs")
          .update({
            Name: name,
            StartDate: startDate.toISOString().split("T")[0],
            EndDate: endDate.toISOString().split("T")[0],
            Parent_id: parentId,
            Author_id: authorId,
            Project_id: projectId,
            Next_job_id: nextJobId,
            Prev_job_id: prevJobId,
            isGroup,
            value,
            Section_id: sectionId,
          })
          .eq("Id", id);

        if (error) throw error;

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        await supabase
          .from("PlanJobsFiles")
          .delete()
          .eq("Jobs_id", id);
      } else {
        // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        const { data: newJob, error } = await supabase
          .from("PlanJobs")
          .insert([
            {
              Name: name,
              StartDate: startDate.toISOString().split("T")[0],
              EndDate: endDate.toISOString().split("T")[0],
              Parent_id: parentId,
              Author_id: authorId,
              Project_id: projectId,
              Next_job_id: nextJobId,
              Prev_job_id: prevJobId,
              isGroup,
              value,
              Section_id: sectionId,
            },
          ])
          .select()
          .single();

        if (error) throw error;
        jobId = newJob.Id;
      }

      // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
      if (photos.length > 0) {
        const filesToInsert = photos.map(photo => ({
          Jobs_id: jobId,
          File: photo,
          isPhoto: true,
          Author_id: authorId,
          Date: new Date().toISOString(),
        }));
        await supabase.from("PlanJobsFiles").insert(filesToInsert);
      }

      setModalVisible(true);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err.message);
      alert("–û—à–∏–±–∫–∞: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={{ flex: 1, backgroundColor: "#fff" }}>
      {/* –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <View style={styles.topBar}>
        <Button title="–ù–∞–∑–∞–¥" onPress={() => router.back()} />
        <Button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" onPress={saveTask} />
        <Button title="–ù–∞—á–∞—Ç—å" color="green" onPress={startTask} />
      </View>

      {loading ? (
        <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
          <ActivityIndicator size="large" color="#007bff" />
        </View>
      ) : (
        <ScrollView style={styles.container}>
            <Text style={styles.label}>–ù–∞–∑–≤–∞–Ω–∏–µ</Text>
            <TextInput style={styles.input} value={name} onChangeText={setName} />

            <Text style={styles.label}>–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</Text>
            <Button title={startDate.toLocaleDateString()} onPress={() => setShowStartPicker(true)} />
            {showStartPicker && (
                <DateTimePicker
                    value={startDate}
                    mode="date"
                    display={Platform.OS === "ios" ? "inline" : "default"}
                    onChange={(event, date) => {
                        setShowStartPicker(Platform.OS === "ios");
                        if (date) setStartDate(date);
                    }}
                />
            )}

            <Text style={styles.label}>–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</Text>
            <Button title={endDate.toLocaleDateString()} onPress={() => setShowEndPicker(true)} />
            {showEndPicker && (
                <DateTimePicker
                    value={endDate}
                    mode="date"
                    display={Platform.OS === "ios" ? "inline" : "default"}
                    onChange={(event, date) => {
                        setShowEndPicker(Platform.OS === "ios");
                        if (date) setEndDate(date);
                    }}
                />
            )}

            {/* üîΩ –ì—Ä—É–ø–ø–∞ (dropdown –≤–º–µ—Å—Ç–æ TextInput) */}
            <Text style={styles.label}>–ì—Ä—É–ø–ø–∞</Text>
            <View style={styles.pickerWrapper}>
                <Picker
                    selectedValue={parentId}
                    onValueChange={(value) => setParentId(value)}
                >
                    <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" value={null} />
                    <Picker.Item label="–ì—Ä—É–ø–ø–∞ 1" value={1} />
                    <Picker.Item label="–ì—Ä—É–ø–ø–∞ 2" value={2} />
                    <Picker.Item label="–ì—Ä—É–ø–ø–∞ 3" value={3} />
                </Picker>
            </View>

            {/* üîΩ –û–±—ä–µ–º —Ä–∞–±–æ—Ç */}
            <Text style={styles.label}>–û–±—ä–µ–º —Ä–∞–±–æ—Ç</Text>
            <TextInput
                style={styles.input}
                value={value}
                onChangeText={setValue}
                keyboardType="numeric"
            />

            {/* üîΩ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞ (dropdown) */}
            <Text style={styles.label}>–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞</Text>
            <View style={styles.pickerWrapper}>
                <Picker
                    selectedValue={prevJobId}
                    onValueChange={(value) => setPrevJobId(value)}
                >
                    <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É" value={null} />
                    <Picker.Item label="–†–∞–±–æ—Ç–∞ –ê" value={101} />
                    <Picker.Item label="–†–∞–±–æ—Ç–∞ B" value={102} />
                    <Picker.Item label="–†–∞–±–æ—Ç–∞ C" value={103} />
                </Picker>
            </View>

            {/* üîΩ –û–ø–∏—Å–∞–Ω–∏–µ */}
            <Text style={styles.label}>–û–ø–∏—Å–∞–Ω–∏–µ</Text>
            <TextInput
                style={[styles.input, { height: 80 }]}
                value={sectionId ? sectionId.toString() : ""}
                onChangeText={(text) => setSectionId(text)}
                multiline
            />

            {/* üîΩ –§–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã */}
            <Text style={styles.label}>–§–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</Text>
            <Button title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ" onPress={pickImage} />
            {photos.map((photo, index) => (
                <View key={index} style={styles.photoContainer}>
                    <Image source={{ uri: photo }} style={styles.image} />
                    <Button title="–£–¥–∞–ª–∏—Ç—å" onPress={() => removePhoto(index)} color="red" />
                </View>
            ))}
        </ScrollView>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <Modal visible={modalVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalBox}>
            <Text style={{ fontSize: 18, fontWeight: "bold", marginBottom: 10 }}>
              ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
            </Text>
            <Text style={{ marginBottom: 20 }}>–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏?</Text>

            <View style={{ flexDirection: "row", justifyContent: "space-between" }}>
              <TouchableOpacity
                style={[styles.modalBtn, { backgroundColor: "#4caf50" }]}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.modalBtnText}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.modalBtn, { backgroundColor: "#f44336" }]}
                onPress={() => {
                  setModalVisible(false);
                  router.back();
                }}
              >
                <Text style={styles.modalBtnText}>–í—ã–π—Ç–∏</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  topBar: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
    backgroundColor: "#f8f8f8",
  },
  label: { fontSize: 16, fontWeight: "bold", marginTop: 12 },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    padding: 10,
    marginTop: 4,
  },
  image: { width: "100%", height: 200, marginTop: 10, borderRadius: 8 },
  photoContainer: { marginTop: 10 },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
    },

  pickerWrapper: {
        borderWidth: 1,
        borderColor: "#ccc",
        borderRadius: 8,
        marginTop: 4,
    },

  modalBox: {
    width: "80%",
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
  },
  modalBtn: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginHorizontal: 5,
  },
  modalBtnText: {
    color: "#fff",
    fontWeight: "bold",
  },
});