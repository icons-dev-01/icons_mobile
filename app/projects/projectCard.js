import { Picker } from "@react-native-picker/picker"; // ‚ö°Ô∏è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è dropdown
import { createClient } from "@supabase/supabase-js";
import { useLocalSearchParams, useRouter } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import {
  Button,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  View,
  TouchableOpacity,
} from "react-native";
import React, { useContext,  useEffect, useState} from "react";
import { ProjectContext } from "../_layout";

// ‚ö°Ô∏è —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Supabase
const supabaseUrl = "https://xttbiyomostvfgsqyduv.supabase.co";
const supabaseAnonKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh0dGJpeW9tb3N0dmZnc3F5ZHV2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTkyNjYwOSwiZXhwIjoyMDcxNTAyNjA5fQ.xfq3j9C3Cl3oUxUQ1HpND_IBPYHltr_YKiZKeDIzUn4";
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export default function ProjectCard() {
  const router = useRouter();
  const {
    id,
    Name,
    Description,
    DateStart,
    DateEnd,
    Parent_id,
    Object_Id,
    nid,
  } = useLocalSearchParams();

  // üìù —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
  const [nameValue, setNameValue] = useState(Name || "");
  const [prefixValue, setPrefixValue] = useState(""); // ‚ö°Ô∏è –Ω–æ–≤–æ–µ –ø–æ–ª–µ "–ü—Ä–µ—Ñ–∏–∫—Å"
  const [parentIdValue, setParentIdValue] = useState(Parent_id || null);
  const [objectIdValue, setObjectIdValue] = useState(Object_Id || null);
  const [descriptionValue, setDescriptionValue] = useState(Description || "");

  // ‚ö°Ô∏è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ Parent_id
  const [projectsList, setProjectsList] = useState([]);

  useEffect(() => {
    const fetchProjects = async () => {
      const { data, error } = await supabase
        .from("Projects")
        .select("Id, Name")
        .order("Name");

      if (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
      } else {
        setProjectsList(data);
      }
    };

    fetchProjects();
  }, []);

const handleSave = async () => {
  try {
    // ‚ö°Ô∏è –¥–æ—Å—Ç–∞—ë–º userId –∏–∑ AsyncStorage
    const userId = await AsyncStorage.getItem("userId");
    if (!userId) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)");

    if (id) {
      // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
      const { error } = await supabase
        .from("Projects")
        .update({
          Name: nameValue,
          Prefix: prefixValue || null,
          Description: descriptionValue,
          Parent_id: parentIdValue || null,
          Object_Id: objectIdValue || null,
          updated_at: new Date().toISOString(),
        })
        .eq("Id", id);

      if (error) throw error;
      console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω");
    } else {
      // —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
      const { data: newProject, error } = await supabase
        .from("Projects")
        .insert([
          {
            Name: nameValue,
            Prefix: prefixValue || null,
            Description: descriptionValue,
            Parent_id: parentIdValue || null,
            Object_Id: objectIdValue || null,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
        ])
        .select()
        .single();

      if (error) throw error;
      console.log("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:", newProject);

      // ‚ö°Ô∏è —Å–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å UserProjects
      const { error: linkError } = await supabase
        .from("UserProjects")
        .insert([{ user_id: userId, project_id: newProject.Id }]);

      if (linkError) throw linkError;
      console.log("üîó –°–≤—è–∑—å UserProject —Å–æ–∑–¥–∞–Ω–∞");
    }

    router.back();
  } catch (err) {
    console.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    console.error(err);
  }
};


  return (
    <View style={{ flex: 1, backgroundColor: "#fff" }}>
      {/* –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <View style={styles.topBar}>
        <Button title="–ù–∞–∑–∞–¥" onPress={() => router.back()} />
        <Button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" color="green" onPress={handleSave} />
      </View>

      <ScrollView style={styles.container}>
        <Text style={styles.label}>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</Text>
        <TextInput
            style={styles.input}
            value={nameValue}
            onChangeText={setNameValue}
        />

        <Text style={styles.label}>–ü—Ä–µ—Ñ–∏–∫—Å</Text>
        <TextInput
            style={styles.input}
            value={prefixValue}
            onChangeText={setPrefixValue}
        />

        <Text style={styles.label}>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç</Text>
        <View style={styles.pickerWrapper}>
            <Picker
                selectedValue={parentIdValue}
                onValueChange={(itemValue) => setParentIdValue(itemValue)}
            >
                <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è" value={null} />
                {projectsList.map((proj) => (
                    <Picker.Item key={proj.id} label={proj.Name} value={proj.id} />
                ))}
            </Picker>
        </View>

        <Text style={styles.label}>–û–±—ä–µ–∫—Ç</Text>
        <View style={styles.pickerWrapper}>
            <Picker
                selectedValue={objectIdValue}
                onValueChange={(itemValue) => setObjectIdValue(itemValue)}
            >
                <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç" value={null} />
                {/* –ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å */}
                <Picker.Item label="–û–±—ä–µ–∫—Ç 1" value="1" />
                <Picker.Item label="–û–±—ä–µ–∫—Ç 2" value="2" />
            </Picker>
        </View>

        <Text style={styles.label}>–û–ø–∏—Å–∞–Ω–∏–µ</Text>
        <TextInput
            style={[styles.input, { height: 80 }]}
            value={descriptionValue}
            onChangeText={setDescriptionValue}
            multiline
        />
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  topBar: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
    backgroundColor: "#f8f8f8",
  },
  label: { fontSize: 16, fontWeight: "bold", marginTop: 12 },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    padding: 10,
    marginTop: 4,
  },
  pickerWrapper: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    marginTop: 4,
  },
});
